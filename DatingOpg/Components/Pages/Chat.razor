@page "/chat/{profileId1:int}/{profileId2:int}"
@using DatingOpg.Models
@using DatingOpg.Components
@using DatingOpg.Data
@using DatingOpg.Services
@inject ChatService ChatService
@inject ProfileService ProfileService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Chat</PageTitle>

<a href="/Accounts/SearchProfiles" class="btn btn-link">&larr; Go back</a>

<div class="chat-container">
    <h3>@(receiverProfile != null ? receiverProfile.NickName : "Loading...")</h3>
    <div class="messages">
        @if (messages != null)
        {
            @foreach (var message in messages)
            {
                <div class="message @(message.SenderId == currentUserId ? "sent" : "received")">
                    @message.Message
                </div>
            }
        }
    </div>
    <div class="input-group">
        <InputText @bind-Value="newMessage" class="form-control" placeholder="Type a message..." />
        <button class="btn btn-primary" @onclick="SendMessage">Send</button>
    </div>
</div>

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100%;
    }
    .messages {
        flex: 1;
        overflow-y: auto;
    }
    .message {
        padding: 10px;
        margin: 5px;
        border-radius: 10px;
        max-width: 60%;
    }
    .sent {
        background-color: #d1e7dd;
        align-self: flex-start;
        text-align: left;
    }
    .received {
        background-color: #f8d7da;
        align-self: flex-end;
        text-align: right;
    }
    .input-group {
        display: flex;
    }
    .input-group .form-control {
        flex: 1;
    }
</style>

@code {
    [Parameter] public int profileId1 { get; set; }
    [Parameter] public int profileId2 { get; set; }
    private List<DatingOpg.Models.Chat> messages = new();
    private string newMessage;
    private int currentUserId;
    private Profile receiverProfile;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var accountIdClaim = user.FindFirst(c => c.Type == "AccountId");

        if (accountIdClaim != null)
        {
            currentUserId = int.Parse(accountIdClaim.Value);
            messages = await ChatService.GetChatMessagesAsync(profileId1, profileId2);
            receiverProfile = await ProfileService.GetProfileByIdAsync(profileId1 == currentUserId ? profileId2 : profileId1);
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessage))
        {
            var chat = new DatingOpg.Models.Chat
            {
                SenderId = currentUserId,
                ReceiverId = profileId1 == currentUserId ? profileId2 : profileId1,
                Message = newMessage,
                Status = 0 // Assuming 0 means "unread"
            };

            await ChatService.AddChatMessageAsync(chat);
            messages.Add(chat);
            newMessage = string.Empty;

            // Force the UI to re-render
            StateHasChanged();
        }
    }
}
